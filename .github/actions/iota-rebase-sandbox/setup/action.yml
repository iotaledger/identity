name: "iota-private-network setup"
description: "Setup IOTA Sandbox"

inputs:
  platform:
    description: "Platform to download binary for (linux or macos)"
    required: true
    default: "linux"
  logfile:
    description: "Optional log file to store server log as workflow artifact"
    required: false
    default: ""

runs:
  using: composite
  steps:
    - name: Set up IOTA Node
      shell: bash
      run: |
        set -e
        mkdir -p iota
        cd iota

        # Set platform
        PLATFORM="${{ inputs.platform }}"
        echo "Looking for platform: $PLATFORM"

        # pinned releases from:
        # url = https://api.github.com/repos/iotaledger/iota/releases/latest
        # releases might be visible before all binaries are available, so refer to fixed binaries here
        if [ "$PLATFORM" = "linux" ]; then
          DOWNLOAD_URL="https://github.com/iotaledger/iota/releases/download/v0.9.2-rc/iota-v0.9.2-rc-linux-x86_64.tgz"
        elif [ "$PLATFORM" = "macos" ]; then
          DOWNLOAD_URL="https://github.com/iotaledger/iota/releases/download/v0.9.2-rc/iota-v0.9.2-rc-macos-arm64.tgz"
        else
          echo "not binaries for platform: $PLATFORM"
          exit 1
        fi

        # Download and extract
        echo "Downloading from: $DOWNLOAD_URL"
        curl -L -o iota.tar.gz $DOWNLOAD_URL
        tar -xzf iota.tar.gz

        echo "$PWD" >> $GITHUB_PATH
        export PATH="$PWD:$PATH"

        which iota || echo "iota not found in PATH"
        ls -la "$PWD"
    - name: Start the Network
      shell: bash
      working-directory: iota
      run: |
        # Clear previous configuration
        rm -rf ~/.iota || true 

        # Check log file arg
        LOGFILE="${{ inputs.logfile }}"
        echo "Starting server with log file: $LOGFILE"

        # Start the network
        iota start --with-faucet ${{ inputs.logfile && format('> {0} 2>&1', inputs.logfile) || '' }} &
