name: Shared / Build and test stronghold nodejs

# This workflow builds and optionally tests the stronghold nodejs bindings.
# It is relying on artifacts generated by the `shared-build-wasm` workflow.
# It outputs build artifacts used for publishing.

on:
  workflow_call:
    inputs:
      run-tests:
        description: "Should tests be run"
        required: false
        type: boolean
        default: true
      input-artifact-name:
        description: "Name used for the input Wasm build artifact"
        required: true
        type: string
      upload-binaries-as-artifacts:
        description: "Should binaries for each platform be uploaded as artifacts (used for publishing)"
        required: false
        type: boolean
        default: false
      output-artifact-name:
        description: "Name used for the output build artifact. Must be set if `upload-binaries-as-artifacts` is true"
        required: false
        type: string

env:
  WORKING_DIRECTORY: bindings/stronghold-nodejs
  APP_NAME: identity-stronghold-nodejs

jobs:
  build:
      defaults:
        run:
          working-directory: bindings/stronghold-nodejs
      env:
        DEBUG: napi:*
        MACOSX_DEPLOYMENT_TARGET: '10.13'
      strategy:
        fail-fast: false
        matrix:
          settings:
            - host: macos-latest
              target: x86_64-apple-darwin
              build: |
                yarn build
                strip -x *.node
            - host: windows-latest
              build: yarn build
              target: x86_64-pc-windows-msvc
            - host: ubuntu-latest
              target: x86_64-unknown-linux-gnu
              docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian
              build: |-
                set -e &&
                yarn build --target x86_64-unknown-linux-gnu &&
                strip *.node
            - host: ubuntu-latest
              target: x86_64-unknown-linux-musl
              docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine
              build: set -e && yarn build && strip *.node
            - host: macos-latest
              target: aarch64-apple-darwin
              build: |
                yarn build --target aarch64-apple-darwin
                strip -x *.node
      name: stable - ${{ matrix.settings.target }} - node@18
      runs-on: ${{ matrix.settings.host }}
      steps:
        - uses: actions/checkout@v3
        - name: Setup node
          uses: actions/setup-node@v3
          if: ${{ !matrix.settings.docker }}
          with:
            node-version: 18
            check-latest: true
            cache: yarn
            cache-dependency-path: ${{ env.WORKING_DIRECTORY }}/yarn.lock
        - name: Install
          uses: dtolnay/rust-toolchain@stable
          if: ${{ !matrix.settings.docker }}
          with:
            toolchain: stable
            targets: ${{ matrix.settings.target }}
        - name: Cache cargo
          uses: actions/cache@v3
          with:
            path: |
              ~/.cargo/registry/index/
              ~/.cargo/registry/cache/
              ~/.cargo/git/db/
              .cargo-cache
              target/
            key: ${{ matrix.settings.target }}-cargo-${{ matrix.settings.host }}
        - uses: goto-bus-stop/setup-zig@v2
          if: ${{ matrix.settings.target == 'armv7-unknown-linux-gnueabihf' }}
          with:
            version: 0.10.1
        - name: Setup toolchain
          run: ${{ matrix.settings.setup }}
          if: ${{ matrix.settings.setup }}
          shell: bash
        - name: Setup node x86
          if: matrix.settings.target == 'i686-pc-windows-msvc'
          run: yarn config set supportedArchitectures.cpu "ia32"
          shell: bash
        - name: Download bindings/wasm artifacts
          uses: actions/download-artifact@v2
          with:
            name: ${{ inputs.input-artifact-name }}
            path: bindings/wasm
        - name: Prepare Wasm bindings link
          run: |
            npm ci
            npm link
          working-directory: ./bindings/wasm
        - name: Install dependencies
          run: npm link @iota/identity-wasm && yarn install
        - name: Setup node x86
          uses: actions/setup-node@v3
          if: matrix.settings.target == 'i686-pc-windows-msvc'
          with:
            node-version: 18
            check-latest: true
            cache: yarn
            cache-dependency-path: ${{ env.WORKING_DIRECTORY }}/yarn.lock
            architecture: x86
        - name: Build in docker
          uses: addnab/docker-run-action@v3
          if: ${{ matrix.settings.docker }}
          with:
            image: ${{ matrix.settings.docker }}
            options: '--user 0:0 -v ${{ github.workspace }}/.cargo-cache/git/db:/usr/local/cargo/git/db -v ${{ github.workspace }}/.cargo/registry/cache:/usr/local/cargo/registry/cache -v ${{ github.workspace }}/.cargo/registry/index:/usr/local/cargo/registry/index -v ${{ github.workspace }}/${{ env.WORKING_DIRECTORY }}:/build -w /build'
            run: ${{ matrix.settings.build }}
        - name: Build
          run: ${{ matrix.settings.build }}
          if: ${{ !matrix.settings.docker }}
          shell: bash
        - name: Upload artifact
          uses: actions/upload-artifact@v3
          with:
            name: bindings-${{ matrix.settings.target }}
            path: ${{ env.WORKING_DIRECTORY }}/${{ env.APP_NAME }}.*.node
            if-no-files-found: error
  test-macOS-windows-binding:
    name: Test bindings on ${{ matrix.settings.target }} - node@${{ matrix.node }}
    needs:
      - build
    defaults:
      run:
        working-directory: bindings/stronghold-nodejs
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: windows-latest
            target: x86_64-pc-windows-msvc
        node:
          - '14'
          - '16'
          - '18'
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v3
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
          check-latest: true
          cache: yarn
          cache-dependency-path: ${{ env.WORKING_DIRECTORY }}/yarn.lock
      - name: Install dependencies
        run: yarn install
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: bindings-${{ matrix.settings.target }}
          path: ${{ env.WORKING_DIRECTORY }}
      - name: List packages
        run: ls -R .
        shell: bash
      - name: Test bindings
        run: yarn test
  test-linux-x64-gnu-binding:
    name: Test bindings on Linux-x64-gnu - node@${{ matrix.node }}
    needs:
      - build
    defaults:
      run:
        working-directory: bindings/stronghold-nodejs
    strategy:
      fail-fast: false
      matrix:
        node:
          - '14'
          - '16'
          - '18'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
          check-latest: true
          cache: yarn
          cache-dependency-path: ${{ env.WORKING_DIRECTORY }}/yarn.lock
      - name: Install dependencies
        run: yarn install
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: bindings-x86_64-unknown-linux-gnu
          path: ${{ env.WORKING_DIRECTORY }}
      - name: List packages
        run: ls -R .
        shell: bash
      - name: Test bindings
        run: docker run --rm -v $(pwd):/build -w /build node:${{ matrix.node }}-slim yarn test
  test-linux-x64-musl-binding:
    name: Test bindings on x86_64-unknown-linux-musl - node@${{ matrix.node }}
    needs:
      - build
    defaults:
      run:
        working-directory: bindings/stronghold-nodejs
    strategy:
      fail-fast: false
      matrix:
        node:
          - '14'
          - '16'
          - '18'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
          check-latest: true
          cache: yarn
          cache-dependency-path: ${{ env.WORKING_DIRECTORY }}/yarn.lock
      - name: Install dependencies
        run: |
          yarn config set supportedArchitectures.libc "musl"
          yarn install
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: bindings-x86_64-unknown-linux-musl
          path: ${{ env.WORKING_DIRECTORY }}
      - name: List packages
        run: ls -R .
        shell: bash
      - name: Test bindings
        run: docker run --rm -v $(pwd):/build -w /build node:${{ matrix.node }}-alpine yarn test
  