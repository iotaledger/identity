name: Shared / Build and test stronghold nodejs

# This workflow builds and optionally tests the stronghold nodejs bindings.
# It is relying on artifacts generated by the `shared-build-wasm` workflow.
# It outputs build artifacts used for publishing.

on:
  workflow_call:
    inputs:
      run-tests:
        description: "Should tests be run"
        required: false
        type: boolean
        default: true
      input-artifact-name:
        description: "Name used for the input Wasm build artifact"
        required: true
        type: string
      upload-binaries-as-artifacts:
        description: "Should binaries for each platform be uploaded as artifacts (used for publishing)"
        required: false
        type: boolean
        default: false
      output-artifact-name:
        description: "Name used for the output build artifact. Must be set if `upload-binaries-as-artifacts` is true"
        required: false
        type: string
jobs:
  build-stronghold-nodejs:
      defaults:
        run:
          working-directory: bindings/stronghold-nodejs
      env:
        DEBUG: napi:*
        APP_NAME: identity-stronghold-nodejs
        MACOSX_DEPLOYMENT_TARGET: '10.13'
        WORKING_DIRECTORY: bindings/stronghold-nodejs
      strategy:
        fail-fast: false
        matrix:
          settings:
            - host: macos-latest
              container: null
              target: x86_64-apple-darwin
              architecture: x64
              build: |
                npm run build
                strip -x dist/*.node
              test: |
                npm run test
            - host: windows-latest
              container: null
              target: x86_64-pc-windows-msvc
              architecture: x64
              build: |
                npm run build
              test: |
                npm run test:examples
            - host: ubuntu-latest
              container: null
              generate-dist: true
              target: x86_64-unknown-linux-gnu
              architecture: x64
              build: |
                npm run build && strip dist/*.node
              test: |
                npm run test
            - host: ubuntu-latest
              # Use container to build musl as `rand::thread_rng()` or `rand::random()` (in our code or dependencies)
              # causes the '__register_atfork' symbol to not be found at runtime when cross-compiled.
              container: rust:1-alpine
              target: x86_64-unknown-linux-musl
              architecture: x64
              setup: |
                # actions/setup-node@v2 does not work for musl, install manually.
                # build-base required for libsodium compilation.
                apk add --no-cache nodejs npm build-base
              build: |
                export NPM_BUILD_NAPI_ARGS=--target=x86_64-unknown-linux-musl
                npm run build && strip dist/*.node
              test: |
                ldd dist/identity-stronghold-nodejs.linux-x64-musl.node || true 
                npm run test:examples
            - host: macos-latest
              container: null
              target: aarch64-apple-darwin
              build: |
                export NPM_BUILD_NAPI_ARGS=--target=aarch64-apple-darwin
                npm run build && strip -x dist/*.node
              # we can't test this properly because the macos-latest runners don't have apple silicon / aarch64
              test: |
                echo "let's hope for the best"
      name: stable - ${{ matrix.settings.target }} - node@16
      runs-on: ${{ matrix.settings.host }}
      container: ${{ matrix.settings.container }}
      steps:
        - uses: actions/checkout@v2

        - name: Setup node
          uses: actions/setup-node@v2
          with:
            node-version: 16
            architecture: ${{ matrix.settings.architecture }}

        - name: Setup Rust and cache
          uses: './.github/actions/rust/rust-setup'
          with:
            os: ${{ matrix.settings.host }}
            job: ${{ github.job }}
            target: ${{ matrix.settings.target }}

        - name: Setup
          if: ${{ matrix.settings.setup }}
          run: ${{ matrix.settings.setup }}

        - name: Download bindings/wasm artifacts
          uses: actions/download-artifact@v2
          with:
            name: ${{ inputs.input-artifact-name }}
            path: bindings/wasm

        - name: Prepare Wasm bindings link
          run: |
            npm ci
            npm link
          working-directory: ./bindings/wasm

        - name: Install dependencies
          # ignore peer dependencies, because in the case of publishing the identity-wasm peer dependency is not released yet
          run: npm ci --ignore-scripts --legacy-peer-deps && npm link @iota/identity-wasm

        - name: Build
          run: ${{ matrix.settings.build }}

        - name: List packages
          run: ls -R .

        - name: Test bindings
          if: ${{ inputs.run-tests && matrix.settings.test }}
          run: ${{ matrix.settings.test }}

        # Optionally uploads binary artifact for current matrix target for later release.
        - name: Upload binary artifact
          if: ${{inputs.upload-binaries-as-artifacts}}
          uses: actions/upload-artifact@v2
          with:
            name: ${{ inputs.output-artifact-name }}
            path: ${{ env.WORKING_DIRECTORY }}/dist/${{ env.APP_NAME }}.*.node
            if-no-files-found: error
            retention-days: 1

        # Optionally uploads js / ts dist artifact for later release. Since js is cross-platform it only needs to be uploaded from one matrix target.
        - name: Upload dist artifact
          if: ${{inputs.upload-binaries-as-artifacts && matrix.settings.generate-dist}}
          uses: actions/upload-artifact@v2
          with:
            name: ${{ inputs.output-artifact-name }}-dist
            path: |
              ${{ env.WORKING_DIRECTORY }}/dist/
              !${{ env.WORKING_DIRECTORY }}/dist/${{ env.APP_NAME }}.*.node
            if-no-files-found: error
            retention-days: 1

