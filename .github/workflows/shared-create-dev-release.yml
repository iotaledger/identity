name: Shared / Create Dev Release

on:
  workflow_call:
    inputs:
      tag-base:
        required: true
        type: string
      prod-tag-regex:
        required: true
        type: string
      changelog-path:
        required: false
        default: ./CHANGELOG.md
        type: string
      changelog-config-path:
        required: true
        type: string


jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          # Number of commits to fetch. 0 indicates all history for all branches and tags.
          fetch-depth: 0
          ref: dev
      - name: Determine Next Version
        run: |

          TAG_BASE=${{ inputs.tag-base }}

          function join_by { local IFS="$1"; shift; echo "$*"; }
          
          updateVersion()
          {
            [[ ${1} =~ ^(.*[^0-9])?([0-9]+)$ ]]  && \
              [[ ${#BASH_REMATCH[1]} -gt 0 ]] && \
                printf "%s%0${#BASH_REMATCH[2]}d" "${BASH_REMATCH[1]}" "$((10#${BASH_REMATCH[2]} + 1 ))" || \
                printf "%0${#BASH_REMATCH[2]}d" "$((10#${BASH_REMATCH[2]} + 1))" || \
              printf "${1}"
          }

          ALL_TAGS=$(git tag --sort=creatordate -l)
          temp_array=()
          for value in ${ALL_TAGS[@]}
          do
              if ! [[ $value == $TAG_BASE* || $value =~ ${{ inputs.prod-tag-regex }} ]]; then
                temp_array+=($value)
              fi
          done
          UNRELATED_TAGS=$(join_by , "${temp_array[@]}")
          unset temp_array
          echo UNRELATED_TAGS=$UNRELATED_TAGS
          
          LATEST_DEV_TAG=$(git tag --list --sort=-version:refname "$TAG_BASE*" | head -n 1)
          echo LATEST_DEV_TAG=$LATEST_DEV_TAG
          if [[ $LATEST_DEV_TAG == '' ]]; then
            NEW_DEV_TAG=$TAG_BASE
            NEW_DEV_TAG+="1"
            LATEST_DEV_TAG=$NEW_DEV_TAG
            FIRST="--exclude-tags "
            SECOND=$UNRELATED_TAGS
            EXCLUDE_ARG=$FIRST$SECOND
          else
            NEW_DEV_TAG=$(updateVersion $LATEST_DEV_TAG)
            ALL_DEV_TAGS_IN_MAIN=$(git tag -l "$TAG_BASE*" --merged $(git log -n 1 refs/remotes/origin/main --pretty=format:"%H"))
            temp_array=()
            for value in "${ALL_DEV_TAGS_IN_MAIN[@]}"
            do
                [[ $value != $LATEST_DEV_TAG ]] && temp_array+=($value)
            done
            FIRST="--exclude-tags "
            SECOND=$(join_by , "${temp_array[@]}")
            if [[ $SECOND != '' ]]; then
              SECOND+=,
            fi
            THIRD=$UNRELATED_TAGS
            unset temp_array
            EXCLUDE_ARG=$FIRST$SECOND$THIRD
          fi

          echo NEW_DEV_TAG=$NEW_DEV_TAG
          NEXTVERSION=$NEW_DEV_TAG

          echo NEXTVERSION=$NEXTVERSION
          echo NEXTVERSION=$NEXTVERSION >> $GITHUB_ENV

          echo EXCLUDE_ARG=$EXCLUDE_ARG
          echo EXCLUDE_ARG=$EXCLUDE_ARG >> $GITHUB_ENV
      - name: Prepare Repository
        run: |
          GITHUB_REPOSITORY_USER=$( echo $GITHUB_REPOSITORY | awk -F'/' '{print $1}') 
          GITHUB_REPOSITORY_PROJECT=$( echo $GITHUB_REPOSITORY | awk -F'/' '{print $2}') 

          echo GITHUB_REPOSITORY_USER=$GITHUB_REPOSITORY_USER
          echo GITHUB_REPOSITORY_PROJECT=$GITHUB_REPOSITORY_PROJECT

          echo GITHUB_REPOSITORY_USER=$GITHUB_REPOSITORY_USER >> $GITHUB_ENV
          echo GITHUB_REPOSITORY_PROJECT=$GITHUB_REPOSITORY_PROJECT >> $GITHUB_ENV
      - name: Run github-changelog-generator
        uses: docker://githubchangeloggenerator/github-changelog-generator
        with:
          args: >
            --output ${{ inputs.changelog-path }}
            --config-file ${{ inputs.changelog-config-path }}
            --user ${{ env.GITHUB_REPOSITORY_USER }}
            --project ${{ env.GITHUB_REPOSITORY_PROJECT }} 
            --token ${{ secrets.GITHUB_TOKEN }} 
            --future-release ${{ env.NEXTVERSION }} 
            ${{ env.EXCLUDE_ARG }}
      - name: Log ${{ inputs.changelog-path }}
        run: cat ${{ inputs.changelog-path }}
      - name: Commit changes
        run: |
          git add -f ${{ inputs.changelog-path }}
          if [[ $(git diff --cached $(git diff --cached --name-only)) == '' ]]; then
            echo '${{ inputs.changelog-path }} unmodified'
            exit 1
          fi
          git config user.name github-actions
          git config user.email github-actions@github.com
          git commit -m "generate changelog"
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v3
        with:
          committer: GitHub <noreply@github.com>
          author: ${{ github.actor }} <${{ github.actor }}@users.noreply.github.com>
          branch: release/${{ env.NEXTVERSION }}
          delete-branch: true
          title: 'Release ${{ env.NEXTVERSION }}'
          body: |
            This automatically generated PR contains changes for the `${{ env.NEXTVERSION }}` version.
            If you discover any mistakes fix them with commits on this branch. If you want to abort the release simply close the PR. 
          labels: |
            automated-pr


      
