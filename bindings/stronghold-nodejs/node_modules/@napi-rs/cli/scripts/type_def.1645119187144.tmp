{"kind": "struct", "name": "NapiChainState", "js_doc": "", "def": "", "original_name": "NapiChainState"}
{"kind": "impl", "name": "NapiChainState", "js_doc": "", "def": "static fromJsonValue(jsonValue: any): NapiChainState\nstatic fromBuffer(buffer: Buffer): NapiChainState\n asJson(): any\n asBytes(): Array<number>"}
{"kind": "struct", "name": "NapiDIDLease", "js_doc": "", "def": "", "original_name": "NapiDIDLease"}
{"kind": "impl", "name": "NapiDIDLease", "js_doc": "", "def": " load(): boolean"}
{"kind": "struct", "name": "NapiIdentityState", "js_doc": "", "def": "", "original_name": "NapiIdentityState"}
{"kind": "impl", "name": "NapiIdentityState", "js_doc": "", "def": "static fromJsonValue(jsonValue: any): NapiIdentityState\nstatic fromBuffer(buffer: Buffer): NapiIdentityState\n asJson(): any\n asBytes(): Array<number>"}
{"kind": "struct", "name": "NapiStronghold", "js_doc": "", "def": "", "original_name": "NapiStronghold"}
{"kind": "impl", "name": "NapiStronghold", "js_doc": "", "def": "/**\n * Creates an instance of `Stronghold`.\n * Prefer to use Stronghold.new(snapshot, password, dropsave)\n */\nstatic create(snapshot: string, password: string, dropsave?: boolean | undefined | null): NapiStronghold\n/** Creates an instance of `Stronghold`. */\nstatic new(snapshot: string, password: string, dropsave?: boolean | undefined | null): Promise<NapiStronghold>\n/** Returns whether save-on-drop is enabled. */\nget dropsave(): boolean\n/**\n * Set whether to save the storage changes on drop.\n * Default: true\n */\nset dropsave(dropsave: boolean)\n/** Sets the account password. */\n setPassword(password: Array<number>): Promise<void>\n/** Write any unsaved changes to disk. */\n flushChanges(): Promise<void>\n/**\n * Attempt to obtain the exclusive permission to modify the given `did`.\n * The caller is expected to make no more modifications after the lease has been dropped.\n * Returns an IdentityInUse error if already leased.\n */\n leaseDid(did: NapiDID): Promise<NapiDIDLease>\n/** Creates a new keypair at the specified `location` */\n keyNew(did: NapiDID, location: NapiKeyLocation): Promise<string>\n/** Inserts a private key at the specified `location`. */\n keyInsert(did: NapiDID, location: NapiKeyLocation, privateKey: string): Promise<string>\n/** Retrieves the public key at the specified `location`. */\n keyGet(did: NapiDID, location: NapiKeyLocation): Promise<string>\n/** Deletes the keypair specified by `location`. */\n keyDel(did: NapiDID, location: NapiKeyLocation): Promise<void>\n/** Signs `data` with the private key at the specified `location`. */\n keySign(did: NapiDID, location: NapiKeyLocation, data: Array<number>): Promise<NapiSignature>\n/** Returns `true` if a keypair exists at the specified `location`. */\n keyExists(did: NapiDID, location: NapiKeyLocation): Promise<boolean>\n/** Returns the chain state of the identity specified by `did`. */\n chainState(did: NapiDID): Promise<NapiChainState | undefined | null>\n/** Set the chain state of the identity specified by `did`. */\n setChainState(did: NapiDID, chainState: NapiChainState): Promise<void>\n/** Returns the state of the identity specified by `did`. */\n state(did: NapiDID): Promise<NapiIdentityState | undefined | null>\n/** Sets a new state for the identity specified by `did`. */\n setState(did: NapiDID, state: NapiIdentityState): Promise<void>\n/** Removes the keys and any state for the identity specified by `did`. */\n purge(did: NapiDID): Promise<void>"}
{"kind": "struct", "name": "NapiKeyLocation", "js_doc": "", "def": "", "original_name": "NapiKeyLocation"}
{"kind": "impl", "name": "NapiKeyLocation", "js_doc": "", "def": "static fromJsonValue(jsonValue: any): NapiKeyLocation\nstatic fromBuffer(buffer: Buffer): NapiKeyLocation"}
{"kind": "struct", "name": "NapiSignature", "js_doc": "", "def": "", "original_name": "NapiSignature"}
{"kind": "impl", "name": "NapiSignature", "js_doc": "", "def": " asJson(): any\n asBytes(): Array<number>"}
{"kind": "struct", "name": "NapiDID", "js_doc": "", "def": "", "original_name": "NapiDID"}
{"kind": "impl", "name": "NapiDID", "js_doc": "", "def": "static fromJsonValue(jsonValue: any): NapiDID\nstatic fromBuffer(buffer: Buffer): NapiDID"}
