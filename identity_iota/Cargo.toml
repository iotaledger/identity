[package]
name = "identity_iota"
version = "1.6.0-alpha"
authors.workspace = true
edition.workspace = true
homepage.workspace = true
keywords = ["iota", "tangle", "identity", "did", "ssi"]
license.workspace = true
readme = "./README.md"
repository.workspace = true
description = "Framework for Self-Sovereign Identity with IOTA DID."

[dependencies]
identity_core = { version = "=1.6.0-alpha", path = "../identity_core", default-features = false }
identity_credential = { version = "=1.6.0-alpha", path = "../identity_credential", features = ["validator"], default-features = false }
identity_did = { version = "=1.6.0-alpha", path = "../identity_did", default-features = false }
identity_document = { version = "=1.6.0-alpha", path = "../identity_document", default-features = false }
identity_iota_core = { version = "=1.6.0-alpha", path = "../identity_iota_core", default-features = false }
identity_resolver = { version = "=1.6.0-alpha", path = "../identity_resolver", default-features = false, optional = true }
identity_storage = { version = "=1.6.0-alpha", path = "../identity_storage", default-features = false, features = ["iota-document"] }
identity_verification = { version = "=1.6.0-alpha", path = "../identity_verification", default-features = false }

[target.'cfg(not(target_arch = "wasm32"))'.dependencies]
identity_iota_interaction = { version = "=1.6.0-alpha", path = "../identity_iota_interaction" }

[target.'cfg(target_arch = "wasm32")'.dependencies]
identity_iota_interaction = { version = "=1.6.0-alpha", path = "../identity_iota_interaction", default-features = false }

[dev-dependencies]
# required for doc test
anyhow = "1.0.64"
identity_iota = { version = "=1.6.0-alpha", path = "./", features = ["memstore"] }
iota-sdk = { git = "https://github.com/iotaledger/iota.git", package = "iota-sdk", tag = "v0.12.0-rc" }
rand = "0.8.5"
secret-storage = { git = "https://github.com/iotaledger/secret-storage.git", tag = "v0.3.0" }
tokio = { version = "1.43", features = ["full"] }

[features]
default = ["revocation-bitmap", "iota-client", "send-sync", "resolver"]

# Enables the IOTA client integration, and the `DidResolutionHandler` trait.
iota-client = [
  "identity_iota_core/iota-client",
  "identity_resolver/iota",
  "identity_storage/storage-signer",
]

# Enables revocation with `RevocationBitmap2022`.
revocation-bitmap = [
  "identity_credential/revocation-bitmap",
  "identity_iota_core/revocation-bitmap",
]

# Enables revocation with `StatusList2021`.
status-list-2021 = ["revocation-bitmap", "identity_credential/status-list-2021"]

# Enables support for the `Resolver`.
resolver = ["dep:identity_resolver"]

# Enables `Send` + `Sync` bounds for the storage and client interaction traits.
send-sync = ["send-sync-storage", "send-sync-client"]
# Enables `Send` + `Sync` bounds for the storage traits.
send-sync-storage = ["identity_storage/send-sync-storage"]
# Enables `Send` + `Sync` bounds for IOTA client interaction traits.
send-sync-client = ["identity_iota_core/send-sync-client-ext"]

# Enables domain linkage support.
domain-linkage = ["identity_credential/domain-linkage"]

# Enables fetching domain linkage configuration files.
domain-linkage-fetch = ["identity_credential/domain-linkage-fetch"]

# Exposes in-memory implementations of the storage traits intended exclusively for testing.
memstore = ["identity_storage/memstore"]

# Enables selective disclosure features.
sd-jwt = ["identity_credential/sd-jwt"]

# Enables selectively disclosable credentials.
sd-jwt-vc = ["identity_credential/sd-jwt-vc"]

# Enables zero knowledge selective disclosurable VCs
jpt-bbs-plus = ["identity_storage/jpt-bbs-plus", "identity_credential/jpt-bbs-plus"]

# Enables integration with IOTA Keytool.
keytool = ["identity_iota_core/keytool", "identity_storage/keytool"]

[package.metadata.docs.rs]
# To build locally:
# RUSTDOCFLAGS="--cfg docsrs" cargo +nightly doc --all-features --no-deps --workspace --open
all-features = true
rustdoc-args = ["--cfg", "docsrs"]

[lints]
workspace = true
