use serde::{Deserialize, Serialize};

use crate::error::{Error, Result};
use identity_core::{common::Timestamp, did::DID};

#[derive(Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Deserialize, Serialize)]
pub struct DIDProof {
    /// A DID URL referencing a DID document key used for signature creation.
    pub id: String,
    /// A timestamp of when the DID proof was created.
    pub created: Timestamp,
    /// The signature value generated by the signature algorithm.
    #[serde(skip_serializing_if = "String::is_empty")]
    pub signature: String,
}

impl DIDProof {
    pub fn new(id: DID) -> Result<Self> {
        let id = id.fragment.ok_or(Error::InvalidMethodId)?;
        Ok(Self {
            id,
            created: Timestamp::now(),
            signature: String::new(),
        })
    }
}
