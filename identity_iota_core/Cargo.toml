[package]
name = "identity_iota_core"
version = "1.6.0-alpha"
authors.workspace = true
edition.workspace = true
homepage.workspace = true
keywords = ["iota", "tangle", "utxo", "identity"]
license.workspace = true
readme = "./README.md"
repository.workspace = true
description = "An IOTA Ledger integration for the IOTA DID Method."

[dependencies]
anyhow = "1.0.75"
async-trait = { version = "0.1.81", default-features = false, optional = true }
cfg-if = "1.0.0"
futures = { version = "0.3", default-features = false }
identity_core = { version = "=1.6.0-alpha", path = "../identity_core", default-features = false }
identity_credential = { version = "=1.6.0-alpha", path = "../identity_credential", default-features = false, features = ["validator"] }
identity_did = { version = "=1.6.0-alpha", path = "../identity_did", default-features = false }
identity_document = { version = "=1.6.0-alpha", path = "../identity_document", default-features = false }
identity_verification = { version = "=1.6.0-alpha", path = "../identity_verification", default-features = false }
num-derive = { version = "0.4", default-features = false }
num-traits = { version = "0.2", default-features = false, features = ["std"] }
once_cell = { version = "1.18", default-features = false, features = ["std"] }
prefix-hex = { version = "0.7", default-features = false }
ref-cast = { version = "1.0.14", default-features = false }
serde.workspace = true
serde_json.workspace = true
strum.workspace = true
thiserror.workspace = true

# for feature `iota-client`
bcs = { version = "0.1.4", optional = true }
fastcrypto = { git = "https://github.com/MystenLabs/fastcrypto", rev = "2f502fd8570fe4e9cff36eea5bbd6fef22002898", package = "fastcrypto", optional = true }
identity_eddsa_verifier = { version = "=1.6.0-alpha", path = "../identity_eddsa_verifier", optional = true }
identity_jose = { version = "=1.6.0-alpha", path = "../identity_jose", optional = true }
iota-crypto = { version = "0.23", optional = true }
itertools = { version = "0.13.0", optional = true }
phf = { version = "0.11.2", features = ["macros"] }
rand = { version = "0.8.5", optional = true }
secret-storage = { git = "https://github.com/iotaledger/secret-storage.git", tag = "v0.3.0", default-features = false, optional = true }
serde-aux = { version = "4.5.0", optional = true }

[target.'cfg(not(target_arch = "wasm32"))'.dependencies]
identity_iota_interaction = { version = "=1.6.0-alpha", path = "../identity_iota_interaction", optional = true }
iota-config = { git = "https://github.com/iotaledger/iota.git", package = "iota-config", tag = "v0.12.0-rc", optional = true }
iota-sdk = { git = "https://github.com/iotaledger/iota.git", package = "iota-sdk", tag = "v0.12.0-rc", optional = true }
move-core-types = { git = "https://github.com/iotaledger/iota.git", package = "move-core-types", tag = "v0.12.0-rc", optional = true }
shared-crypto = { git = "https://github.com/iotaledger/iota.git", package = "shared-crypto", tag = "v0.12.0-rc", optional = true }
tokio = { version = "1.43", default-features = false, features = ["macros", "sync", "rt", "process"] }

[target.'cfg(target_arch = "wasm32")'.dependencies]
identity_iota_interaction = { version = "=1.6.0-alpha", path = "../identity_iota_interaction", default-features = false, optional = true }
tokio = { version = "1.43", default-features = false, features = ["sync"] }
# Dependency iota_interaction_ts is always used on wasm32 platform. It is not controlled by the "iota-client" feature
# because it's unclear how to implement this. wasm32 build will most probably always use the "iota-client" feature
# so this seems to be tolerable for now.
iota_interaction_ts = { version = "=1.6.0-alpha", path = "../bindings/wasm/iota_interaction_ts" }

[dev-dependencies]
iota-crypto = { version = "0.23", default-features = false, features = ["bip39", "bip39-en"] }
proptest = { version = "1.0.0", default-features = false, features = ["std"] }

# for feature iota-client tests
identity_iota_core = { path = ".", features = ["iota-client", "keytool"] } # enable for e2e tests
identity_storage = { path = "../identity_storage", features = ["send-sync-storage", "storage-signer", "keytool"] }
lazy_static = "1.5.0"
serial_test = "3.1.1"

[package.metadata.docs.rs]
# To build locally:
# RUSTDOCFLAGS="--cfg docsrs" cargo +nightly doc --all-features --no-deps --workspace --open
all-features = true
rustdoc-args = ["--cfg", "docsrs"]

[features]
default = ["iota-client", "revocation-bitmap", "send-sync"]
# Enables the IOTA Client related components, and dependencies.
iota-client = [
  "dep:async-trait",
  "dep:bcs",
  "dep:fastcrypto",
  "dep:identity_eddsa_verifier",
  "dep:identity_iota_interaction",
  "dep:identity_jose",
  "dep:iota-config",
  "dep:iota-crypto",
  "dep:iota-sdk",
  "dep:itertools",
  "dep:move-core-types",
  "dep:rand",
  "dep:secret-storage",
  "dep:serde-aux",
]

# Enables revocation with `RevocationBitmap2022`.
revocation-bitmap = ["identity_credential/revocation-bitmap"]

# Enables `Send` + `Sync` bounds for the storage and client interaction traits.
send-sync = ["send-sync-storage", "send-sync-client-ext", "identity_iota_interaction/send-sync-transaction"]
# Enables `Send` + `Sync` bounds for the storage traits.
send-sync-storage = ["secret-storage?/send-sync-storage"]
# Enables `Send` + `Sync` bounds for IOTA client interaction traits.
send-sync-client-ext = []
keytool = [
  "identity_iota_interaction/keytool",
  "identity_storage/keytool",
  "iota_interaction_ts/keytool",
  "iota-client",
]

[lints]
workspace = true
