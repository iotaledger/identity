// Copyright 2020-2024 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

use fastcrypto::encoding::Base64;

use serde::{Deserialize, Serialize};
use crate::iota_sdk_abstraction::{SignatureBcs, TransactionDataBcs};
use super::iota_json_rpc_types::iota_transaction::IotaTransactionBlockResponseOptions;
use super::iota_json_rpc_types::IotaObjectDataOptions;
use super::iota_types::dynamic_field::DynamicFieldName;
use super::iota_types::quorum_driver_types::ExecuteTransactionRequestType;

// The types defined in this file:
// * do not exist in the iota rust sdk
// * have an equivalent type in the iota typescript sdk
// * are needed for wasm-bindings
// * have been generated by @iota/sdk/typescript/scripts/generate.ts
// 
// As there is no equivalent rust type in the iota rust sdk, we need to
// define equivalent rust types here.

#[derive(Clone, Debug, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct ExecuteTransactionBlockParams {
  /// BCS serialized transaction data bytes without its type tag, as base-64 encoded string.
  transaction_block: Base64,
  /// A list of signatures (`flag || signature || pubkey` bytes, as base-64 encoded string). Signature is committed to the intent message of the transaction data, as base-64 encoded string.
  signature: Vec<Base64>,
  /// options for specifying the content to be returned
  options: Option<IotaTransactionBlockResponseOptions>,
  /// The request type, derived from `IotaTransactionBlockResponseOptions` if None
  request_type: Option<ExecuteTransactionRequestType>,
}

impl ExecuteTransactionBlockParams {
  pub fn new(tx_bytes: &TransactionDataBcs, signatures: &Vec<SignatureBcs>, options: Option<IotaTransactionBlockResponseOptions>, request_type: Option<ExecuteTransactionRequestType>) -> Self {
    ExecuteTransactionBlockParams {
      transaction_block: Base64::from_bytes(&tx_bytes),
      signature: signatures.into_iter().map(|sig| Base64::from_bytes(&sig)).collect(),
      options,
      request_type,
    }
  }
}

/// Return the dynamic field object information for a specified object
#[derive(Clone, Debug, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct GetDynamicFieldObjectParams {
  /// The ID of the queried parent object
  parent_id: String,
  /// The Name of the dynamic field
  name: DynamicFieldName,
}

impl GetDynamicFieldObjectParams {
  pub fn new(parent_id: String, name: DynamicFieldName) -> Self {
    GetDynamicFieldObjectParams { parent_id, name }
  }
}

/// Return the object information for a specified object
#[derive(Clone, Debug, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct GetObjectParams {
  /// the ID of the queried object
  id: String,
  /// options for specifying the content to be returned
  options: Option<IotaObjectDataOptions>,
}

impl GetObjectParams {
  pub fn new(id: String, options: Option<IotaObjectDataOptions>) -> Self {
    GetObjectParams { id, options }
  }
}
